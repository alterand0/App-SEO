import streamlit as st
import os
import tempfile
import time
import logging
from pathlib import Path
import base64
from io import BytesIO
from PIL import Image

# Importar m√≥dulos personalizados
from utils.article_extractor import extraer_contenido_articulo
from utils.image_processor import descargar_imagenes, descargar_fuente, procesar_imagen_subida
from utils.video_creator import crear_video
from utils.database import init_database, guardar_proyecto

# Configuraci√≥n de logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Creador de Videos SEO",
    page_icon="üé¨",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Funci√≥n para mostrar im√°genes con un tama√±o espec√≠fico
def mostrar_imagen(imagen_path, width=200):
    try:
        img = Image.open(imagen_path)
        # Redimensionar para mostrar como thumbnail
        img.thumbnail((width, width * img.height // img.width))
        buf = BytesIO()
        img.save(buf, format="JPEG")
        st.image(buf, width=width)
    except Exception as e:
        st.error(f"Error al mostrar la imagen: {str(e)}")

# Funci√≥n para generar enlace de descarga
def get_binary_file_downloader_html(bin_file, file_label='Archivo'):
    with open(bin_file, 'rb') as f:
        data = f.read()
    b64 = base64.b64encode(data).decode()
    href = f'<a href="data:video/mp4;base64,{b64}" download="{os.path.basename(bin_file)}">{file_label}</a>'
    return href

# Inicializar la base de datos
try:
    init_database()
    logging.info("Base de datos inicializada correctamente")
except Exception as e:
    logging.error(f"Error al inicializar la base de datos: {str(e)}")

# Inicializar el estado de la sesi√≥n si no existe
if 'paso_actual' not in st.session_state:
    st.session_state.paso_actual = 1
if 'textos' not in st.session_state:
    st.session_state.textos = []
if 'imagenes' not in st.session_state:
    st.session_state.imagenes = []
if 'video_path' not in st.session_state:
    st.session_state.video_path = None
if 'fuente_path' not in st.session_state:
    st.session_state.fuente_path = None
if 'imagenes_con_texto' not in st.session_state:
    st.session_state.imagenes_con_texto = []
if 'url_articulo' not in st.session_state:
    st.session_state.url_articulo = None
if 'proyecto_guardado' not in st.session_state:
    st.session_state.proyecto_guardado = False

# Sidebar con instrucciones
with st.sidebar:
    st.title("üé¨ Creador de Videos SEO")
    st.write("Crea videos SEO optimizados a partir de art√≠culos web.")
    
    st.subheader("Instrucciones:")
    st.write("1. Ingresa la URL del art√≠culo")
    st.write("2. Edita los textos extra√≠dos")
    st.write("3. Selecciona las im√°genes a usar")
    st.write("4. Genera y descarga tu video")
    
    # Informaci√≥n sobre los pasos
    st.subheader("Proceso:")
    paso1_status = "‚úÖ" if st.session_state.paso_actual > 1 else "üîµ" if st.session_state.paso_actual == 1 else "‚ö™Ô∏è"
    paso2_status = "‚úÖ" if st.session_state.paso_actual > 2 else "üîµ" if st.session_state.paso_actual == 2 else "‚ö™Ô∏è"
    paso3_status = "‚úÖ" if st.session_state.paso_actual > 3 else "üîµ" if st.session_state.paso_actual == 3 else "‚ö™Ô∏è"
    paso4_status = "‚úÖ" if st.session_state.paso_actual > 4 else "üîµ" if st.session_state.paso_actual == 4 else "‚ö™Ô∏è"
    
    st.write(f"{paso1_status} Paso 1: Extraer contenido")
    st.write(f"{paso2_status} Paso 2: Editar textos")
    st.write(f"{paso3_status} Paso 3: Seleccionar im√°genes")
    st.write(f"{paso4_status} Paso 4: Crear video")
    
    # Agregar enlace al historial de proyectos
    st.markdown("---")
    st.subheader("Proyectos:")
    if st.sidebar.button("üìÇ Ver historial de proyectos"):
        st.switch_page("pages/historial.py")

# T√≠tulo principal
st.title("üé¨ Creador de Videos SEO")

# PASO 1: Extraer contenido del art√≠culo
if st.session_state.paso_actual == 1:
    st.header("Paso 1: Extraer contenido del art√≠culo")
    
    # Descargar la fuente en segundo plano
    if not st.session_state.fuente_path:
        with st.spinner("Preparando recursos..."):
            st.session_state.fuente_path = descargar_fuente()
    
    url = st.text_input("Ingresa la URL del art√≠culo:", 
                         placeholder="https://www.ejemplo.com/articulo")
    
    if st.button("Extraer contenido"):
        if url:
            try:
                with st.spinner("Extrayendo contenido del art√≠culo..."):
                    textos, imagenes_urls = extraer_contenido_articulo(url)
                    
                    if not textos:
                        st.error("No se pudo extraer texto del art√≠culo.")
                    else:
                        st.session_state.textos = textos
                        st.session_state.url_articulo = url
                        
                        progress_bar = st.progress(0)
                        st.info(f"Descargando {len(imagenes_urls)} im√°genes...")
                        
                        imagenes_paths = descargar_imagenes(imagenes_urls, progress_bar)
                        
                        if not imagenes_paths:
                            st.warning("No se pudieron descargar im√°genes del art√≠culo.")
                        
                        st.session_state.imagenes = imagenes_paths
                        st.session_state.paso_actual = 2
                        st.rerun()
                        
            except Exception as e:
                st.error(f"Error al extraer contenido: {str(e)}")
        else:
            st.warning("Por favor, ingresa una URL v√°lida.")

# PASO 2: Editar textos
elif st.session_state.paso_actual == 2:
    st.header("Paso 2: Editar textos para el video")
    
    if not st.session_state.textos:
        st.error("No hay textos para editar. Vuelve al paso anterior.")
        if st.button("Volver al paso 1"):
            st.session_state.paso_actual = 1
            st.rerun()
    else:
        st.write("Edita los textos que aparecer√°n en el video y selecciona cu√°les incluir:")
        
        textos_editados = []
        textos_seleccionados = []
        
        for i, texto in enumerate(st.session_state.textos):
            col1, col2 = st.columns([10, 1])
            with col1:
                texto_editado = st.text_area(f"Texto {i+1}", 
                                           value=texto,
                                           height=100, 
                                           key=f"texto_{i}")
                textos_editados.append(texto_editado)
            
            with col2:
                incluir = st.checkbox("Incluir", value=True, key=f"incluir_{i}")
                textos_seleccionados.append(incluir)
        
        # Botones para navegar
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚¨ÖÔ∏è Volver"):
                st.session_state.paso_actual = 1
                st.session_state.textos = []
                st.session_state.imagenes = []
                st.rerun()
                
        with col2:
            if st.button("Continuar ‚û°Ô∏è"):
                textos_finales = [texto for texto, seleccionado in zip(textos_editados, textos_seleccionados) if seleccionado]
                
                if not textos_finales:
                    st.error("Debes seleccionar al menos un texto para el video.")
                else:
                    st.session_state.textos = textos_finales
                    st.session_state.paso_actual = 3
                    st.rerun()

# PASO 3: Seleccionar im√°genes
elif st.session_state.paso_actual == 3:
    st.header("Paso 3: Seleccionar im√°genes")
    
    # Mostrar im√°genes descargadas
    imagenes_seleccionadas = []
    
    if not st.session_state.imagenes:
        st.warning("No hay im√°genes disponibles del art√≠culo.")
    else:
        st.subheader("Im√°genes del art√≠culo")
        st.write("Selecciona las im√°genes que deseas incluir en el video:")
        
        # Mostrar im√°genes en una cuadr√≠cula con checkboxes
        cols = 4
        
        for i in range(0, len(st.session_state.imagenes), cols):
            row = st.columns(cols)
            for j in range(cols):
                idx = i + j
                if idx < len(st.session_state.imagenes):
                    with row[j]:
                        mostrar_imagen(st.session_state.imagenes[idx])
                        seleccionada = st.checkbox("Seleccionar", value=True, key=f"img_{idx}")
                        imagenes_seleccionadas.append(seleccionada)
    
    # Opci√≥n para subir im√°genes adicionales
    st.subheader("Subir im√°genes adicionales")
    archivos_subidos = st.file_uploader("Selecciona im√°genes para subir", 
                                        type=["jpg", "jpeg", "png"], 
                                        accept_multiple_files=True)
    
    imagenes_subidas = []
    if archivos_subidos:
        for archivo in archivos_subidos:
            st.write(f"Procesando imagen: {archivo.name}")
            imagen_path = procesar_imagen_subida(archivo)
            if imagen_path:
                imagenes_subidas.append(imagen_path)
                st.session_state.imagenes.append(imagen_path)
                # Actualizar imagenes_seleccionadas con True para las nuevas im√°genes
                imagenes_seleccionadas.append(True)
    
    # Botones para navegar
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚¨ÖÔ∏è Volver"):
            st.session_state.paso_actual = 2
            st.rerun()
            
    with col2:
        if st.button("Continuar ‚û°Ô∏è"):
            # Filtrar im√°genes seleccionadas
            imagenes_finales = [img for img, sel in zip(st.session_state.imagenes, imagenes_seleccionadas) if sel]
            
            if not imagenes_finales:
                st.error("Debes seleccionar al menos una imagen para el video.")
            else:
                st.session_state.imagenes = imagenes_finales
                st.session_state.paso_actual = 4
                st.rerun()

# PASO 4: Crear video
elif st.session_state.paso_actual == 4:
    st.header("Paso 4: Crear video")
    
    if not st.session_state.textos or not st.session_state.imagenes:
        st.error("Faltan textos o im√°genes para crear el video.")
        if st.button("Volver al inicio"):
            st.session_state.paso_actual = 1
            st.rerun()
    else:
        st.write(f"‚úÖ {len(st.session_state.textos)} textos seleccionados")
        st.write(f"‚úÖ {len(st.session_state.imagenes)} im√°genes seleccionadas")
        
        if not st.session_state.video_path:
            if st.button("Generar Video"):
                try:
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    def update_progress(progress):
                        progress_bar.progress(progress)
                        if progress < 0.25:
                            status_text.text("Preparando im√°genes...")
                        elif progress < 0.5:
                            status_text.text("A√±adiendo textos a las im√°genes...")
                        elif progress < 0.75:
                            status_text.text("Creando secuencias de video...")
                        else:
                            status_text.text("Finalizando el video...")
                    
                    with st.spinner("Creando video..."):
                        titulo = st.session_state.textos[0]
                        imagenes_con_texto, video_path = crear_video(
                            st.session_state.textos,
                            st.session_state.imagenes,
                            titulo,
                            fuente_path=st.session_state.fuente_path,
                            progress_callback=update_progress
                        )
                        
                        st.session_state.imagenes_con_texto = imagenes_con_texto
                        
                        if video_path:
                            st.session_state.video_path = video_path
                            progress_bar.progress(1.0)
                            status_text.text("¬°Video creado con √©xito!")
                        else:
                            progress_bar.progress(1.0)
                            status_text.text("No se pudo crear el video, pero se generaron las im√°genes con texto.")
                            st.warning("No se pudo crear el video, pero se han generado las im√°genes con texto que puedes descargar. Si ves este mensaje despu√©s de instalar moviepy, es posible que falte FFmpeg u otras dependencias.")
                        
                        st.rerun()
                        
                except Exception as e:
                    error_message = str(e)
                    logging.error(f"Error al crear el video: {error_message}")
                    
                    # Mensajes m√°s informativos seg√∫n el tipo de error
                    if "ffmpeg" in error_message.lower():
                        st.error(f"Error con FFmpeg: {error_message}. Intenta ejecutar la aplicaci√≥n en un entorno donde FFmpeg est√© instalado correctamente.")
                    elif "imageio" in error_message.lower():
                        st.error(f"Error con imageio: {error_message}. Aseg√∫rate de que imageio y imageio-ffmpeg est√©n instalados correctamente.")
                    elif "moviepy" in error_message.lower():
                        st.error(f"Error con moviepy: {error_message}. Aseg√∫rate de que moviepy est√© instalado correctamente.")
                    else:
                        st.error(f"Error al crear el video: {error_message}")
        else:
            if st.session_state.video_path:
                st.success("¬°Video creado con √©xito!")
                
                # Guardar el proyecto en la base de datos si a√∫n no se ha guardado
                if not st.session_state.proyecto_guardado:
                    try:
                        # El t√≠tulo es el primer texto seleccionado
                        titulo = st.session_state.textos[0]
                        proyecto_id = guardar_proyecto(
                            titulo, 
                            url_articulo=st.session_state.url_articulo,
                            video_path=st.session_state.video_path,
                            textos=st.session_state.textos,
                            imagenes_originales=st.session_state.imagenes,
                            imagenes_con_texto=st.session_state.imagenes_con_texto
                        )
                        st.session_state.proyecto_guardado = True
                        st.success(f"Proyecto guardado en la base de datos (ID: {proyecto_id})")
                    except Exception as e:
                        st.error(f"Error al guardar el proyecto en la base de datos: {str(e)}")
                
                # Mostrar opciones de descarga
                st.subheader("Descargar video")
                video_name = os.path.basename(st.session_state.video_path)
                st.markdown(get_binary_file_downloader_html(st.session_state.video_path, f"Descargar {video_name}"), unsafe_allow_html=True)
                
                # Visualizaci√≥n del video
                st.subheader("Previsualizaci√≥n")
                st.video(st.session_state.video_path)
                
                # Enlace al historial de proyectos
                st.markdown("---")
                st.info("Puedes ver todos tus proyectos en el historial.")
                if st.button("Ver historial de proyectos"):
                    st.switch_page("pages/historial.py")
            else:
                st.warning("No se pudo crear el video, pero se generaron im√°genes con texto que puedes descargar individualmente. Las im√°genes con texto son √∫tiles para redes sociales y otras publicaciones.")
                st.info("üí° Consejo: Aunque no se pudo crear el video, las im√°genes con texto generadas son perfectas para compartir en redes sociales, blogs o presentaciones.")
                
                # Mostrar las im√°genes generadas
                if 'imagenes_con_texto' in st.session_state and st.session_state.imagenes_con_texto:
                    st.subheader("Im√°genes generadas con texto")
                    
                    # Mostrar im√°genes en una cuadr√≠cula
                    cols = 3
                    for i in range(0, len(st.session_state.imagenes_con_texto), cols):
                        row = st.columns(cols)
                        for j in range(cols):
                            idx = i + j
                            if idx < len(st.session_state.imagenes_con_texto):
                                with row[j]:
                                    mostrar_imagen(st.session_state.imagenes_con_texto[idx], width=300)
                                    img_name = os.path.basename(st.session_state.imagenes_con_texto[idx])
                                    st.markdown(get_binary_file_downloader_html(
                                        st.session_state.imagenes_con_texto[idx], 
                                        f"Descargar imagen {idx+1}"
                                    ), unsafe_allow_html=True)
            
            # Opciones para volver a empezar
            if st.button("Crear otro video"):
                # Reiniciar el estado
                st.session_state.paso_actual = 1
                st.session_state.textos = []
                st.session_state.imagenes = []
                st.session_state.video_path = None
                st.session_state.url_articulo = None
                st.session_state.proyecto_guardado = False
                if 'imagenes_con_texto' in st.session_state:
                    del st.session_state.imagenes_con_texto
                st.rerun()

# Agregar un pie de p√°gina
st.markdown("---")
st.markdown("üìä **Creador de Videos SEO** ¬∑ Creado con Streamlit")
